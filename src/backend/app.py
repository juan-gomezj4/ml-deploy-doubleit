from fastapi import FastAPI, HTTPException
from loguru import logger

from src.model.load_model import DoubleItModel
from src.model.schema import InputData

# Inicializaci√≥n de la aplicaci√≥n FastAPI con metadatos mejorados
app = FastAPI(
    title="Servicio de Inferencia - DoubleIt",
    description="""
    # API de DoubleIt - Multiplicaci√≥n por 2

    Este proyecto implementa un servicio que utiliza un modelo TorchScript para multiplicar n√∫meros por 2.
    Incluye una API REST desarrollada con FastAPI y una interfaz de usuario simple construida con Streamlit.

    ## Funcionalidades

    * Procesamiento de listas de n√∫meros enteros
    * Multiplicaci√≥n de cada valor por 2 usando un modelo de TorchScript
    * Validaci√≥n autom√°tica de entradas
    * Respuestas estructuradas con los datos originales y resultados

    ## Instrucciones de uso

    La API espera recibir una lista de n√∫meros enteros y devolver√° cada valor multiplicado por 2.
    """,
    version="1.0.0",
    contact={
        "name": "Equipo de ML - Juan G√≥mez",
        "email": "jgomezja@unal.edu.co",
    },
)
logger.info("üöÄ Aplicaci√≥n FastAPI iniciada.")

# Cargar el modelo al iniciar la aplicaci√≥n
try:
    model: DoubleItModel = DoubleItModel()
    logger.info("‚úÖ Modelo cargado exitosamente.")
except Exception as err:
    logger.exception("‚ùå Error al cargar el modelo.")
    raise RuntimeError("Error.") from err


@app.post(
    "/predict",
    response_model=dict[str, list],
    summary="Multiplicar valores por 2",
    description="Recibe una lista de enteros y devuelve cada valor multiplicado por 2 usando el modelo TorchScript",
    response_description="Objeto con la lista de entrada y la lista de salida con valores duplicados",
    status_code=200,
    tags=["Predicci√≥n"],
)
def predict(data: InputData) -> dict[str, list]:
    """
    Endpoint que procesa una lista de n√∫meros enteros y devuelve cada valor multiplicado por 2.

    ## Par√°metros

    * **data**: Objeto que contiene una lista de n√∫meros enteros a multiplicar

    ## Retorna

    Diccionario con:
    * **input**: Lista original de n√∫meros
    * **output**: Lista con cada n√∫mero multiplicado por 2

    ## Ejemplos

    Petici√≥n:

    ```json
    {
      "values": [1, 2, 3]
    }
    ```

    Respuesta:

    ```json
    {
      "input": [1, 2, 3],
      "output": [2, 4, 6]
    }
    ```

    ## Posibles errores

    * **400**: Entrada inv√°lida - Cuando los datos no cumplen con el formato esperado
    * **500**: Error interno del servidor - Cuando ocurre un error durante el procesamiento
    """
    logger.info("üì• Solicitud de predicci√≥n recibida.")
    try:
        resultado = model.predict(data.values)
        logger.info(f"‚úÖ Predicci√≥n generada correctamente: {resultado}")
    except ValueError as err:
        logger.exception("‚ùå Error de validaci√≥n en los datos de entrada.")
        raise HTTPException(
            status_code=400,
            detail="Entrada inv√°lida. Por favor, proporcione solo n√∫meros enteros.",
        ) from err
    except Exception as err:
        logger.exception("‚ùå Error inesperado durante la predicci√≥n.")
        raise HTTPException(
            status_code=500,
            detail="Error interno del servidor al procesar la predicci√≥n.",
        ) from err
    else:
        return {"input": data.values, "output": resultado}
